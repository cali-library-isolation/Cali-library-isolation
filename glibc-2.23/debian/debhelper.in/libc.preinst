#!/bin/sh
set -e
export LC_ALL=C

type=$1
preversion=$2

package_name()
{
    if dpkg --assert-multi-arch 2>/dev/null; then
        echo LIBC:${DPKG_MAINTSCRIPT_ARCH}
    else
        echo LIBC
    fi
}

linux_compare_versions () {
    verA=$(($(echo "$1" | sed 's/^\([0-9]*\.[0-9]*\)\([^.0-9]\|$\)/\1.0\2/; s/\([0-9]*\)\.\([0-9]*\)\.\([0-9]*\).*/\1 \* 10000 + \2 \* 100 + \3/')))
    verB=$(($(echo "$3" | sed 's/^\([0-9]*\.[0-9]*\)\([^.0-9]\|$\)/\1.0\2/; s/\([0-9]*\)\.\([0-9]*\)\.\([0-9]*\).*/\1 \* 10000 + \2 \* 100 + \3/')))

    test $verA -$2 $verB
}

kfreebsd_compare_versions () {
    verA=$(($(echo "$1" | sed 's/\([0-9]*\)\.\([0-9]*\).*/\1 \* 100 + \2/')))
    verB=$(($(echo "$3" | sed 's/\([0-9]*\)\.\([0-9]*\).*/\1 \* 100 + \2/')))

    test $verA -$2 $verB
}

# Sanity check.
# If there are versions of glibc outside of the normal installation
# location (/lib, /lib64, etc.) then things may break very badly
# as soon as ld.so is replaced by a new version.  This check is not
# foolproof, but it's pretty accurate.  This script ignores libraries
# with different sonames, and libraries incompatible with the 
# to-be-installed ld.so.
check_dir () {
    msg=$1
    dir=$2

    # Follow symlinks
    dir=$(readlink -e $dir || true)

    # Ignore inexistent directories
    if ! test -d "$dir" ; then
        return
    fi
  
    # Detect possible candidates
    files=$(ls $dir | egrep '^(ld|lib(d|c|m|pthread|rt|dl))-2.*.so' 2>/dev/null || true)
    if test -z "$files" ; then
        return
    fi
  
    for file in $files ; do
        lib=$dir/$file

        # Skip if it is a symlink (as installed by lsb-core)
        if test -L "$lib" ; then
            continue
        fi

        # Skip if it is the currently dynamic loader
        if test "$lib" = "$ldfile" ; then
            continue
        fi

        # See if the found libraries are compatible with the system ld.so;
        # if they aren't, they'll be ignored. Check e_ident, e_type (which
        # will just be ET_DYN), and e_machine. If a match is found, there
        # is a risk of breakage.
        libbytes=`head -c 20 $lib | od -c`
        if test "$ldbytes" != "$libbytes" ; then 
          continue
        fi

        # Binaries owned packages are considered to do the right thing
        # First try a quick lookup which should catch all cases on a 
        # normal system
        if echo $libcfiles | grep -q "[ ^]$lib[ $]" ; then 
            continue
        fi

        # Slower lookup to confirm
        if dpkg-query -S "$lib" >/dev/null 2>&1 ; then
            continue
        fi

        # Output an error message and exit
        echo
        echo "A copy of the C library was found $msg:"
        echo "  '$lib'"
        echo "It is not safe to upgrade the C library in this situation;"
        echo "please remove that copy of the C library or get it out of"
        echo "'$dir' and try again."
        echo
        exit 1
    done
}

if [ "$type" != abort-upgrade ]
then
    # Load debconf module if available
    if [ -f /usr/share/debconf/confmodule ] ; then
        . /usr/share/debconf/confmodule
    fi

    # See if LD_LIBRARY_PATH contains the traditional /lib, but not the
    # multiarch path
    dirs=$(echo $LD_LIBRARY_PATH | sed 's/:/ /g')
    for dir in $dirs ; do
        dir=$(readlink -e $dir || true)
        case "$dir" in
        /lib)
            seen_traditional=1
            ;;
        SLIBDIR)
            seen_multiarch=1
            ;;
        esac
    done
    if test -n "$seen_traditional" && test -z "$seen_multiarch" ; then
        echo
        echo "LD_LIBRARY_PATH contains the traditional /lib directory,"
        echo "but not the multiarch directory SLIBDIR."
        echo "It is not safe to upgrade the C library in this situation;"
        echo "please remove the /lib/directory from LD_LIBRARY_PATH and" 
        echo "try again."
        echo
        exit 1
    fi

    # glibc kernel version check
    system=`uname -s`
    if [ "$system" = "Linux" ]
    then
        # Test to make sure z < 255, in x.y.z-n form of kernel version
        # Also make sure we don't trip on x.y.zFOO-n form
        kernel_rev=$(uname -r | sed 's/\([0-9]*\.\)\{1,2\}\([0-9]*\)\(.*\)/\2/')
        if [ "$kernel_rev" -ge 255 ]
        then
            echo "ERROR: Your kernel version indicates a revision number"
            echo "of 255 or greater.  Glibc has a number of built in"
            echo "assumptions that this revision number is less than 255."
            echo "If you\'ve built your own kernel, please make sure that any"
            echo "custom version numbers are appended to the upstream"
            echo "kernel number with a dash or some other delimiter."
            echo
            exit 1
        fi

        # sanity checking for the appropriate kernel on each architecture.
        kernel_ver=`uname -r`
        case ${DPKG_MAINTSCRIPT_ARCH:-$(dpkg --print-architecture)} in
            amd64|i386)
                # The GNU libc requires a >= 2.6.32 kernel, found in squeeze or RHEL6
                kernel_ver_min=2.6.32
                # But we don't officially support kernels before 3.2
                kernel_ver_rec=3.2
                ;;
            *)
                # The GNU libc requires a >= 3.2 kernel, found in wheezy
                kernel_ver_min=3.2
                kernel_ver_rec=3.2
                ;;
        esac

        if linux_compare_versions "$kernel_ver" lt $kernel_ver_min
        then
            if [ -f /usr/share/debconf/confmodule ]
            then
                db_version 2.0
                db_fset glibc/kernel-too-old seen false
                db_reset glibc/kernel-too-old
                db_subst glibc/kernel-too-old kernel_ver $kernel_ver_rec
                db_input critical glibc/kernel-too-old || true
                db_go
                db_stop
            else
                echo "ERROR: This version of the GNU libc requires kernel version"
                echo "$kernel_ver_rec or later.  Please upgrade your kernel before installing"
                echo "glibc."
                echo
            fi
            exit 1
        fi

        if linux_compare_versions "$kernel_ver" lt $kernel_ver_rec
        then
            if [ -f /usr/share/debconf/confmodule ]
            then
                db_version 2.0
                db_fset glibc/kernel-not-supported seen false
                db_reset glibc/kernel-not-supported
                db_subst glibc/kernel-not-supported kernel_ver $kernel_ver_rec
                db_input critical glibc/kernel-not-supported || true
                db_go
                db_stop
            else
                echo "WARNING: This version of the GNU libc requires kernel version"
                echo "$kernel_ver_rec or later.  Older versions might work but are not officially"
                echo "supported.  Please consider upgrading your kernel."
                echo
            fi
        fi

    elif [ $system = "GNU/kFreeBSD" ]
    then
        kernel_ver=`uname -r`
        kernel_ver_min=8.3
        if kfreebsd_compare_versions "$kernel_ver" lt $kernel_ver_min
        then
            if [ -f /usr/share/debconf/confmodule ]
            then
                db_version 2.0
                db_version 2.0
                db_fset glibc/kernel-too-old seen false
                db_reset glibc/kernel-too-old
                db_subst glibc/kernel-too-old kernel_ver $kernel_ver_min
                db_input critical glibc/kernel-too-old || true
                db_go
                db_stop
            else
                echo "ERROR: This version of the GNU libc requires kernel version"
                echo "$kernel_ver_min or later.  Please upgrade your kernel before installing"
                echo "glibc."
                echo
            fi
            exit 1
        fi
    fi
fi

if [ "$type" = upgrade ]
then
    # Try to detect copies of the libc library in the various places
    # the dynamic linker uses.
    ldfile=$(readlink -m RTLD_SO)
    if test -f "$file"; then
        ldbytes=$(head -c 20 RTLD_SO | od -c)
    else
        # If the symlink to the dynamic linker is dangling or missing, set
        # ldbytes to an empty string, the test below will fail and all the
        # libraries found will be ignored.
        ldbytes=""
    fi
    libcfiles=$(dpkg-query -L $(package_name) 2>/dev/null)

    dirs="SLIBDIR /lib /lib/tls /lib32 /lib64 /usr/local/lib /usr/local/lib32 /usr/local/lib64"
    for dir in $dirs ; do
        check_dir "in an unexpected directory" $dir
    done

    if test -n "$LD_LIBRARY_PATH"; then
        dirs=$(echo $LD_LIBRARY_PATH | sed 's/:/ /g')
        for dir in $dirs ; do
            check_dir "via LD_LIBRARY_PATH" $dir
        done
    fi

    if test -e /etc/ld.so.conf; then
        dirs=$(echo $(cat /etc/ld.so.conf))
        if test -n "$dirs" ; then
            for dir in $dirs ; do
                check_dir "via /etc/ld.so.conf" $dir
            done
        fi
    fi

    if [ -e /lib/tls/i686/cmov/libc.so.6 ] || [ -e /lib/i686/cmov/libc.so.6 ] ; then
        status_i686=$(dpkg -s libc6-i686 2>/dev/null | grep ^Status: | sed -e 's/^Status: \(.*\) \(.*\) \(.*\)/\3/g')
        status_xen=$(dpkg -s libc6-xen 2>/dev/null | grep ^Status: | sed -e 's/^Status: \(.*\) \(.*\) \(.*\)/\3/g')
        if ([ -z "$status_i686" ] || [ "$status_i686" = "not-installed" ] || [ "$status_i686" = "config-files" ]) && \
             ([ -z "$status_xen" ] || [ "$status_xen" = "not-installed" ] || [ "$status_xen" = "config-files" ]); then
            echo
            echo "A non-dpkg owned copy of the libc6-i686 package was found."
            echo "It is not safe to upgrade the C library in this situation;"
            echo "please remove that copy of the C library and try again."
            echo
            exit 1
        fi
    fi

    # ldconfig might have broken the ld.so symlink in case a biarch package
    # of the same architecture than the native one has been installed (e.g.:
    # libc6-amd64:i386 on amd64). Try to detect this by checking that the 
    # ld.so symlink correctly points to ld-*.so in the slib directory, and 
    # disabling ldconfig if it is not the case and the new version hasn't
    # been unpacked yet. The symlink will be fixed when unpacking the new 
    # libc version and ldconfig will be re-enabled when a new fixed version
    # is unpacked.
    if ! readlink -m RTLD_SO | grep -qE 'SLIBDIR/ld-[0-9.]+\.so' ; then
        # The unpack order is not guaranteed, only disable ldconfig if 
        # a "broken" version is installed.
        libc_bin_version=$(dpkg-query -W -f='${Version}' libc-bin)
        if dpkg --compare-versions "$libc_bin_version" lt "2.18-2"; then
            echo "Warning: found a potentially broken dynamic loader symlink,"
            echo "disabling ldconfig to avoid a possible system breakage. It"
            echo "will be reenabled when a new version of libc-bin is unpacked." 
            ln -sf /bin/true /sbin/ldconfig
        fi
    fi

    if [ -n "$preversion" ]; then
	# NSS authentication trouble guard
	if dpkg --compare-versions "$preversion" lt GLIBC_VERSION; then
	    if pidof xscreensaver xlockmore >/dev/null; then
		if [ -f /usr/share/debconf/confmodule ] ; then
		    db_version 2.0
		    db_reset glibc/disable-screensaver
		    db_input critical glibc/disable-screensaver || true
		    db_go || true
		else
		    echo "xscreensaver and xlockmore must be restarted before upgrading"
		    echo
		    echo "One or more running instances of xscreensaver or xlockmore have been"
		    echo "detected on this system. Because of incompatible library changes, the"
		    echo "upgrade of the GNU C library will leave you unable to authenticate to"
		    echo "these programs. You should arrange for these programs to be restarted"
		    echo "or stopped before continuing this upgrade, to avoid locking your users"
		    echo "out of their current sessions."
		    echo
		    frontend=`echo "$DEBIAN_FRONTEND" | tr '[:upper:]' '[:lower:]'`
		    if [ "$frontend" = noninteractive ]; then
			echo "Non-interactive mode, upgrade glibc forcibly"
		    else
		        echo -n "Press a key to continue"
		        read answer
		    fi
		    echo
		fi
	    fi

	    check="kdm postgresql xdm"
            # the following substitution processes the check variable
            # and returns results in the services variable
	    # NSS services check:
	    __NSS_CHECK__
	    if [ -n "$services" ]; then 
		if [ -f /usr/share/debconf/confmodule ] ; then
	            db_version 2.0
		    db_reset glibc/upgrade
		    db_subst glibc/upgrade services $services
		    if [ "$RELEASE_UPGRADE_MODE" = desktop ]; then
			db_input medium glibc/upgrade || true
		    else
			db_input critical glibc/upgrade || true
		    fi
		    db_go || true
		    db_get glibc/upgrade
		    answer=$RET
		else
		    echo "Do you want to upgrade glibc now?"
		    echo
		    echo "Running services and programs that are using NSS need to be restarted,"
		    echo "otherwise they might not be able to do lookup or authentication any more."
		    echo "The installation process is able to restart some services (such as ssh or"
		    echo "telnetd), but other programs cannot be restarted automatically.  One such"
		    echo "program that needs manual stopping and restart after the glibc upgrade by"
		    echo "yourself is xdm - because automatic restart might disconnect your active"
		    echo "X11 sessions."
		    echo
		    echo "This script detected the following installed services which must be"
		    echo "stopped before the upgrade: $services"
		    echo
		    echo "If you want to interrupt the upgrade now and continue later, please"
		    echo "answer No to the question below."
		    echo 
		    frontend=`echo "$DEBIAN_FRONTEND" | tr '[:upper:]' '[:lower:]'`
		    if [ "$frontend" = noninteractive ]; then
			echo "Non-interactive mode, upgrade glibc forcibly"
			answer=true
		    else
		        echo -n "Do you want to upgrade glibc now? [Y/n] "
		        read answer
		        case $answer in
			    Y*|y*) answer=true ;;
			    N*|n*) answer=false ;;
			    *) answer=true ;;
			esac
		    fi
		    echo
		fi

		if [ "x$answer" != "xtrue" ]; then
	            echo "Stopped glibc upgrade.  Please retry the upgrade after you have"
	            echo "checked or stopped services by hand."
	            exit 1
		fi
	    fi

            services=""
            check="apache2.2-common apache apache-ssl apache-perl autofs at"
            check="$check boa cucipop courier-authdaemon cron cups exim"
            check="$check exim4-base dovecot-common cucipop incron lprng lpr"
            check="$check lpr-ppd mysql-server nis openbsd-inetd"
            check="$check openldapd proftpd postfix postfix-tls rsync samba"
            check="$check sasl2-bin slapd smail sendmail snmpd ssh"
            check="$check spamassassin vsftpd wu-ftpd wu-ftpd-academ wwwoffle"
            check="$check webmin dropbear"
            # the following substitution processes the check variable
            # and returns results in the services variable
            # NSS services check: NSS_CHECK
            if [ -n "$services" ]; then
                if [ -f /usr/share/debconf/confmodule ] ; then
                    db_version 2.0
                    if [ "$RELEASE_UPGRADE_MODE" = desktop ]; then
                        db_input medium libraries/restart-without-asking || true
                    else
                        db_input critical libraries/restart-without-asking || true
                    fi
                    db_go || true
    
                    db_get libraries/restart-without-asking
                    if [ "$RET" != true ]; then
                        db_reset glibc/restart-services
                        db_set glibc/restart-services "$services"
                        if [ "$RELEASE_UPGRADE_MODE" = desktop ]; then
                            db_input medium glibc/restart-services || true
                        else
                            db_input critical glibc/restart-services || true
                        fi
                        db_go || true
                        db_get glibc/restart-services
                        services="$RET"
                    fi
                else
                    echo
                    echo "Name Service Switch update in the C Library: post-installation question."
                    echo
                    echo "Running services and programs that are using NSS need to be restarted,"
                    echo "otherwise they might not be able to do lookup or authentication any more"
                    echo "(for services such as ssh, this can affect your ability to login)."
                    echo "Note: restarting sshd/telnetd should not affect any existing connections."
                    echo
                    echo "The services detected are: "
                    echo "        $services"
                    echo
                    echo "If other services have begun to fail mysteriously after this upgrade, it is"
                    echo "probably necessary to restart them too.  We recommend that you reboot your"
                    echo "machine after the upgrade to avoid NSS-related troubles."
                    echo
                    frontend=`echo "$DEBIAN_FRONTEND" | tr '[:upper:]' '[:lower:]'`
                    if [ "$frontend" = noninteractive ]; then
                            echo "Non-interactive mode, restarting services"
                            answer=yes
                    else
                            echo -n "Do you wish to restart services? [Y/n] "
                            read answer
                            case $answer in
                            N*|n*) services="" ;;
                            *) ;;
                            esac
                    fi
                fi

                if [ -n "$services" ]; then
                    echo "Stopping some services possibly affected by the upgrade (will be restarted later):"
                    for service in $services; do
			# We can't just use a generic rewrite here, as it was
			# samba in wheezy and smbd in jessie, which confuses.
                        if [ "$service" = "samba" ]; then
                            if [ -x /etc/init.d/smbd ] || [ -f /etc/init/smbd ]; then
                                service="smbd"
                            fi
                        fi
                        if [ -x "`which invoke-rc.d 2>/dev/null`" ]; then
                            idl="invoke-rc.d ${service}"
                            idlopt="stop"
                        elif [ -f /usr/share/file-rc/rc ] || [ -f /usr/lib/file-rc/rc ] && [ -f /etc/runlevel.conf ]; then
                            idl=$(filerc $rl $service)
                            idlopt="stop"
                        else
                            idl=$(ls /etc/rc${rl}.d/S??${service} 2> /dev/null | head -1)
                            idlopt="stop"
                        fi
                        case "$service" in
                            cron)
                                # See bug (LP: #508083)
                                echo -n "  $service: stopping..."
                                if $idl $idlopt > /dev/null 2>&1; then
                                    echo "done."
                                    echo "$service" >> /var/run/services.need_start
                                else
                                    echo "FAILED! ($?)"
                                    echo "$service" >> /var/run/services.need_restart
                                fi
                              ;;

                            *)
                                # log service details to allow postinst to handle the
                                # restart.
                                echo "$service" >> /var/run/services.need_restart
                              ;;
                        esac
                    done
    
                fi
                echo
            else
                echo "Nothing to restart."
            fi
	fi # end upgrading and $preversion lt GLIBC_VERSION
    fi # Upgrading

    # This will keep us from using hwcap libs (optimized) during an
    # upgrade.
    touch /etc/ld.so.nohwcap
fi

# We now use the multiarch triplet instead of the GNU triplet for the ld.so
# configuration file, in order to keep a stable path. Remove the old file.
case ${DPKG_MAINTSCRIPT_ARCH:-$(dpkg --print-architecture)} in
    hurd-i386)
        dpkg-maintscript-helper rm_conffile /etc/ld.so.conf.d/i486-gnu.conf 2.19-11~ libc0.3:hurd-i386 -- "$@"
        dpkg-maintscript-helper rm_conffile /etc/ld.so.conf.d/i486-gnu-gnu.conf 2.19-11~ libc0.3:hurd-i386 -- "$@"
        ;;
    i386)
        dpkg-maintscript-helper rm_conffile /etc/ld.so.conf.d/i486-linux-gnu.conf 2.19-4~ libc6:i386 -- "$@"
        dpkg-maintscript-helper rm_conffile /etc/ld.so.conf.d/i686-linux-gnu.conf 2.19-13~ libc6:i386 -- "$@"
        ;;
    kfreebsd-i386)
        dpkg-maintscript-helper rm_conffile /etc/ld.so.conf.d/i486-kfreebsd-gnu.conf 2.19-11~ libc0.1:kfreebsd-i386 -- "$@"
        ;;
esac

#DEBHELPER#

if [ -n "$preversion" ]; then
    if dpkg --compare-versions "$preversion" lt GLIBC_VERSION; then
       # unconditionally wipe ld.so.cache on major version upgrades; this
       # makes those upgrades a bit slower, but is less error-prone than
       # hoping we notice every time the cache format is changed upstream
       rm -f /etc/ld.so.cache
       rm -f /var/cache/ldconfig/aux-cache
    fi
fi

exit 0
